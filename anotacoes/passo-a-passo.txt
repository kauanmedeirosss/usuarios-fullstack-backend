1 -> alterado o nome da classe run apenas para "Application"

2 -> criadas as pastas controller, model, repository e controller

3 -> criada entidade user, bem como seu repository

4 -> definindo que hibernate criará as tabelas (linha 2 de application.properties)
     + OBS1: se tabela não existir, ela é criada. se hoverem novas propriedades, novas colunas são criadas
     + OBS2: para projetos mais sérios essa abordagem não é recomendada, e sim as ferramentas de migração (Flyway, Liquibase)

5 -> criada a database no mysql e definida sua url e demais dados da mesma nas configs
     + OBS1: ativado o serviço MySQL80 em 'serviços' windows
     + OBS2: comandos dados no mysql estão no arquivo 'comandos-sql'

6 -> foi dada uma run no projeto para verificar se estava tudo ok e as tabelas haviam sido criadas em minha database

7 -> criado o usercontroller

8 -> criado o folder desta aplicação, bem como sua requisição POST
     http://localhost:8080/user
     para fins de testar o controller

10 -> commit de upload realizado

11 -> foi baixado o nodejs
      https://nodejs.org/pt/download

12 -> aberto o git bash na pasta do meu projeto e dado o seguinte comando para criação do projeto:
      npx create-react-app frontend
      OBS: abrir o git bash na pasta/local que quer criar esse projeto (pode ser a mesma pasta que está a pasta do back)

13 -> abri o projeto no vscode e preparei o projeto com o seguinte comando no terminal do vscode:
      npm start
      - OBS: caso dê erro usar o script abaixo
        Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
        abrir um novo terminal e executar novamente o npm start

14 -> no vscode foram criadas, dentro de src, as pastas layout (contendo Navbar.js),
      pages (contendo Home.js) e users (contendo AddUser.js, EditUser.js e ViewUser.js)

15 -> (vscode) no arquivo Navbar foi usado o atalho rfc para criar a estrutura lá vista

16 -> https://www.npmjs.com/package/bootstrap
      no site do npm copiamos o comando de install do bootstrap
      abrimos o terminal do vscode e executamos o comando copiado
      npm i bootstrap (até o presente momento, este é o comando)

17 -> (vscode) foi dado o import do bootstrap na classe App.js

18 -> https://getbootstrap.com/docs/5.3/components/navbar/#how-it-works
      onde foi pego o código posto no arquivo Navbar.js (o codigo foi cortado em certa parte, pesquisando por Navbar)
      OBS: atalho identação vscode Shift + Alt + F

19 -> (vscode) na classe Navbar.js ocorreu uma substituição do nome class por className,
      foi usado o atalho ctrl + F (é necessário dar um click no icone que aponta para baixo)
      na linha de cima o nome do termo como é (class) e na de baixo como queremos que seja (className), depois é só ficar apertando 'Enter' para que altere todas as ocorrencias

20 -> (vscode) feitas alterações na classe App.js
      e algumas mudanças na Navbar

21 -> https://getbootstrap.com/docs/5.3/components/navbar/#how-it-works
      onde foi pego o código posto no arquivo Navbar.js (o codigo foi cortado em certa parte, pesquisando por Tables)
      o código cópiado foi posto na classe Home.js

22 -> https://www.npmjs.com/package/axios
      na barra de pesquisa, procurar por 'axios' e selecionar o primeiro resultado
      copiar o install (no presente momento é "npm i axios")
      abrir o terminal vscode e colar o install
      após isso já é possível ver a dependency e sua versão em package.json

23 -> na versão 1.3 já podemos ver o engatinhar da nossa conexão front-back
      no vscode, na classe Home.js, da linha 6 a 15

24 -> já em nosso intellij, no controller de usuario, vemos o uso do @CrossOrigin, que faz a ligação com o front
      (enquanto o front está, atualmente, conectando na classe home, usando do axios
      antes, ao inspecionar a pagina react e ir em console se via varias mensagens de erro
      agora, não aparecem mais tais mensagens

25 -> no vscode, na classe home, no loadusers, na linha de resultados, podemos adiiconar o .data e deixar a visualização da inspeção mais limpa
      inspecionar -> console -> [{...}] -> voilá, podemos ver os dados

26 -> colocando os dados nas tabelas:
      1) no home.js, vamos no return e deixamos apenas uma <tr> preenchida (a do Mark, costuma ser a primeira), as outras apagamos
      2) no <tbody> adicionamos o {users...}, que, basicamente, vem da primeira const nessa classe const [users...
      3) colocamos um .map(), isso aplica uma função em cada elemento
      4) nisso, criamos uma função com user,index
      5) pegamos toda a tr do Mark (a única que deixamos) e jogamos dentro dessa função
      6) feito isso fazemos as ligações, conforme constará no commit 1.3
      OBS: ainda não vão aparecer esses dados nas tabelas, algo precisa ser feito (passo 27)

27 -> na mesma classe home, em loadusers trocamos console.log por setUsers
      dê um refresh na pagina react e veja a mágica

28 -> foram alteradas também as tr de dcope col, para mudar nomes das colunas no react
      adicionada a col(umn) action

29 -> foram adicionados os botões view, edit e delete em Home.js

30 -> no package/folder users, vamos configurar a rota do botão "addUser"
      1º - damos um rfc (digitado no conteudo de codigo da classe) + enter na classe AddUser.js
      2º - acessamos o https://www.npmjs.com/ e pesquisamos por "react-router-dom"
      3º - copiamos o install (npm i react-router-dom) e colamos e executamos no terminal vscode
      4º - no App.js, importamos o router e colocamos home e navbar dentro de uma tag router
      5º - em seguida foi feito o mapeamento de home e sua rota (app.js
      6º - importado e mapeado adduser com sua rota (app.js
      7º - em Navbar.js (que é onde está o botão adduser), trocamos a tag button por Link
           e mapeamos para "adduser" (aquele do app.js) com a palavra to=.
           OBS: até esse módulo 7, nós conseguimos clicar no botão da navbar e sermos encaminhados para uma página
                com "AddUser Form" escrito, o que significa que fomos encaminhados para a página cuja lógica
                é a da classe users/AddUser.js

31 -> esculpido o formulário de adição de usuário na classe AddUser.js
      foram criadas as divs com os campos para digitar informações
      foi criado o botão para submeter os dados

32 -> na js class AddUser.js foi feita a lógica de conexão de dados com os textos inseridos pelos usuários,
      usando o useState do React e inserindo a var "value" (linhas 27...) e atribuindo aos valores da const user (linha 11)

33 -> foi feita uma função para fazer com que os valores do useState fossem preenchidos (lá está um modelo JSON com valores vazios)
      essa é a função onInputChange, nos inputs foi colocado o onChange

34 -> em AddUser.js, foi transformado tudo entre h2 e a primeira div em formulário com <form></form>, e foi adicionada a
      função onSubmit neste form, nesta função foi possível observar a importancia do método e.preventDefault(),
      se dessemos submit antes de posto o método, nossos dados seriam expostos na URL, agora, com o método, eles
      não aparecem mais

35 -> foi chamado o axios com o método post e o botão cancel foi transformado em Link (para voltar a página)


OBS: o projeto não conta com o uso do lombock, por isso tem getters, setters e instancias autowired manuais
OBS2: para um projeto mais elegante melhor buscar inspiração no 'cadastro-autores-api', esse é apenas para testar a integração do front e back com react
OBS3: para rodar o vscode, abrimos o terminal e damos o comando 'npm start'
OBS4: achei interessante como apenas a palavra 'border' (no vscode, classe Home.js, linha 7) faz a tabela mudar visualmente (para melhor!)
OBS5: <tr> significa table row
OBS6: a partir do passo 28 podemos fazer requisições no postman livremente e a atualização no browser é automática

O que aprendemos sobre conexão:
1 - 'axios' para conectar o back(e suas entidades da db) com o front
2 - 'react-router-dom' para as funções